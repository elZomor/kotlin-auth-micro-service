name: Code Quality & Formatting

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  permissions:
    contents: read
    security-events: write

jobs:
  code-formatting:
    name: Code Formatting & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: gradle
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Check Kotlin formatting with ktlint
      run: ./gradlew ktlintCheck
      continue-on-error: false
    
    - name: Run ktlint format check (dry-run)
      id: ktlint-format-check
      run: |
        # Check if ktlint would make changes
        ./gradlew ktlintFormat --dry-run || echo "formatting-needed=true" >> $GITHUB_OUTPUT
      continue-on-error: true
    
    - name: Auto-format code if needed
      if: github.event_name == 'pull_request' && steps.ktlint-format-check.outputs.formatting-needed == 'true'
      run: |
        ./gradlew ktlintFormat
        if [[ -n $(git status --porcelain) ]]; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Auto-format code with ktlint"
          git push origin HEAD:${{ github.head_ref }}
        fi
    
    - name: Run Detekt static analysis
      run: ./gradlew detekt
      continue-on-error: false
    
    - name: Upload Detekt reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: detekt-reports
        path: |
          build/reports/detekt/
          **/build/reports/detekt/
        retention-days: 7
    
    - name: Comment PR with Detekt results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Try to read detekt report
          try {
            const reportPath = 'build/reports/detekt/detekt.xml';
            if (fs.existsSync(reportPath)) {
              const report = fs.readFileSync(reportPath, 'utf8');
              const issueCount = (report.match(/<error/g) || []).length;
              
              const comment = `## üìä Code Quality Report
              
              **Detekt Static Analysis Results:**
              - Issues found: ${issueCount}
              - Report artifact uploaded for detailed analysis
              
              ${issueCount === 0 ? '‚úÖ No code quality issues detected!' : '‚ö†Ô∏è Please review and fix the detected issues.'}
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not read detekt report:', error.message);
          }

  build-and-lint:
    name: Build & Compile Check
    runs-on: ubuntu-latest
    needs: code-formatting
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: gradle
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Compile main classes
      run: ./gradlew compileKotlin compileJava
    
    - name: Compile test classes
      run: ./gradlew compileTestKotlin compileTestJava
    
    - name: Run build without tests
      run: ./gradlew build -x test
    
    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v1
    
    - name: Check dependencies for vulnerabilities
      run: ./gradlew dependencyCheckAnalyze
      continue-on-error: true
    
    - name: Upload dependency check reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-check-reports
        path: build/reports/
        retention-days: 7

  documentation-check:
    name: Documentation & Code Style
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for README updates
      run: |
        if [[ ! -f "README.md" ]]; then
          echo "‚ùå README.md is missing"
          exit 1
        fi
        echo "‚úÖ README.md exists"
    
    - name: Check documentation structure
      run: |
        required_docs=("docs/PROJECT_STRUCTURE.md" "docs/TESTING_DOCUMENTATION.md")
        for doc in "${required_docs[@]}"; do
          if [[ ! -f "$doc" ]]; then
            echo "‚ùå Required documentation missing: $doc"
            exit 1
          else
            echo "‚úÖ Found: $doc"
          fi
        done
    
    - name: Validate Markdown files
      uses: DavidAnson/markdownlint-cli2-action@v20
      with:
        globs: '**/*.md'
        continue-on-error: true
    
    - name: Check for TODO comments in production code
      run: |
        # Allow TODO in test files and docs, but not in main source
        todo_count=$(find src/main -name "*.kt" -exec grep -l "TODO\|FIXME\|HACK" {} \; | wc -l)
        if [[ $todo_count -gt 0 ]]; then
          echo "‚ùå Found $todo_count files with TODO/FIXME/HACK comments in production code:"
          find src/main -name "*.kt" -exec grep -l "TODO\|FIXME\|HACK" {} \;
          echo "Please resolve these before merging."
          exit 1
        else
          echo "‚úÖ No TODO/FIXME/HACK comments found in production code"
        fi

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.24.0
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  code-quality-summary:
    name: Code Quality Summary
    runs-on: ubuntu-latest
    needs: [code-formatting, build-and-lint, documentation-check]
    if: always()
    
    steps:
    - name: Check job results
      run: |
        echo "## üìã Code Quality Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.code-formatting.result }}" == "success" ]]; then
          echo "‚úÖ **Code Formatting & Linting**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Code Formatting & Linting**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.build-and-lint.result }}" == "success" ]]; then
          echo "‚úÖ **Build & Compile Check**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Build & Compile Check**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.documentation-check.result }}" == "success" ]]; then
          echo "‚úÖ **Documentation & Style**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Documentation & Style**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Quality Metrics" >> $GITHUB_STEP_SUMMARY
        echo "- Code formatting enforced with ktlint" >> $GITHUB_STEP_SUMMARY
        echo "- Static analysis with Detekt" >> $GITHUB_STEP_SUMMARY
        echo "- Dependency vulnerability scanning" >> $GITHUB_STEP_SUMMARY
        echo "- Documentation completeness check" >> $GITHUB_STEP_SUMMARY
        echo "- Security analysis with Trivy" >> $GITHUB_STEP_SUMMARY
    
    - name: Fail workflow if any job failed
      if: needs.code-formatting.result == 'failure' || needs.build-and-lint.result == 'failure' || needs.documentation-check.result == 'failure'
      run: |
        echo "‚ùå One or more code quality checks failed"
        exit 1